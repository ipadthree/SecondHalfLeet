/*Other's idea, but I modified a little*/

class Solution {
public:
    bool isvalid(string t){
        if(t.length() > 3 || t.length() == 0 || (t[0] == '0' && t.length() > 1) || stoi(t) > 255){
            return false;
        }
        return true;
    }
    vector<string> restoreIpAddresses(string s) {
        vector<string> result;
        int len = s.size();
        for(int i = 0; i < 3 && i < len - 3; i++){
            for(int j = i + 1; j < i+4 && j < len - 2; j++){
                for(int k = j + 1; k < j+4 && k < len - 1; k++){
                    string s1 = s.substr(0,i+1);
                    string s2 = s.substr(i+1,j-i);
                    string s3 = s.substr(j+1,k-j);
                    string s4 = s.substr(k+1,len-k);
                    if(isvalid(s1) && isvalid(s2) && isvalid(s3) && isvalid(s4)){
                        result.push_back(s1+"."+s2+"."+s3+"."+s4);
                    }
                }
            }
        }
        return result;
    }
};


3-loop divides the string s into 4 substring: s1, s2, s3, s4. Check if each substring is valid. In isValid, strings whose length 
greater than 3 or equals to 0 is not valid; or if the string's length is longer than 1 and the first letter is '0' then it's 
invalid; or the string whose integer representation greater than 255 is invalid.
