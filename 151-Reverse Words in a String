/*My idea, time complicity is O(n), space complicity is O(n), really slow*/

void reverseWords(string &s) {
    string result;
    for(int i = s.size() - 1; i >= 0; i--){
        while(s[i] == ' ' && i >= 0) i--;
        if(i < 0) continue;
        string temp;
        while(s[i] != ' ' && i >= 0){
            temp = s[i] + temp;
            i--;
        }
        result = result + temp + " ";
    }
    int bl = result.size();
    int sl = result.size()-1;
    result = result.substr(0,sl);
    s = result;
}

//O(n) O(1) solution: reverse each word and then reverse the whole string.


The idea is to ignore the extra spaces, reverse words one by one and reverse the whole string in the end. I think for
the interview it is good to show that substr or istringstream can be used too. The idea is taken from here

class Solution {
public:

    // function to reverse any part of string from i to j (just one word or entire string)
    void reverseword(string &s, int i, int j){
        while(i<j){
          char t=s[i];
          s[i++]=s[j];
          s[j--]=t;
        } 
    }

    void reverseWords(string &s) {

        int i=0, j=0;
        int l=0;
        int len=s.length();
        int wordcount=0;

        while(true){
            while(i<len && s[i] == ' ') i++;  // skip spaces in front of the word
            if(i==len) break;
            if(wordcount) s[j++]=' ';
            l=j;
            while(i<len && s[i] != ' ') {s[j]=s[i]; j++; i++;} 
            reverseword(s,l,j-1);                // reverse word in place
            wordcount++;

        }

        s.resize(j);                           // resize result string
        reverseword(s,0,j-1);                  // reverse whole string
    }
};
