Analysis:
This problem is straightforward (no need to think about KMP algorithm), only dictionary (hashmap) can pass the OJ.
Since there are many restrictions in this problem, it becomes much easier. E.g., only four chars are occurred in the sequence (A,T,C,and G), only length-10 substr is needed.
So the algorithm goes as follows:
1. Search from the start of the string, get every substr with length 10.
2. Construct and look up a hashmap, add 1 to the value.
3. After the whole search, check every entry in the hashmap, if the value is greater than 1, output.

Note that in the C++ OJ, when using string as the map key, the will cause an memory exceeded error. So, I map the string to long int, which is used as the key. Results are mapped back to string and output.

//I rewrite it, be careful about the exceed, so I used long long.
Code(C++):
class Solution {
public:
    long long string2long(string s){
        long long index = 0;
        for(int i = 0; i < 10; i++){
            if(s[i] == 'A') index = index * 10 + 1;
            if(s[i] == 'T') index = index * 10 + 2;
            if(s[i] == 'C') index = index * 10 + 3;
            if(s[i] == 'G') index = index * 10 + 4;
        }
        return index;
    }
    string long2string(long long index){
        string res;
        long long temp = 0;
        while(index){
            temp = index % 10;
            if(temp == 1) res = 'A' + res;
            if(temp == 2) res = 'T' + res;
            if(temp == 3) res = 'C' + res;
            if(temp == 4) res = 'G' + res;
            index /= 10;
        }
        return res;
    }
    vector<string> findRepeatedDnaSequences(string s) {
        vector<string> result;
        map<long long,int> mapp;
        int len = s.length();
        for(int i = 0; i < len-9; i++){
            long long now = string2long(s.substr(i,10));
            if(mapp.find(now) == mapp.end()){
                mapp[now] = 1;
            }else{
                mapp[now]++;
            }
        }
        for(map<long long,int>::iterator it = mapp.begin(); it != mapp.end(); it++){
            if(it->second > 1){
                result.push_back(long2string(it->first));
            }
        }
        return result;
    }
};
