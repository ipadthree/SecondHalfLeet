This is the standard manual multiplication algorithm. We use two nested for loops, working backward from the end of each 
input number. We pre-allocate our result and accumulate our partial result in there. One special case to note is when our 
carry requires us to write to our sum string outside of our for loop.

At the end, we trim any leading zeros, or return 0 if we computed nothing but zeros.

class Solution {
public:
    string multiply(string num1, string num2) {
        int length1 = num1.size();
        int length2 = num2.size();
        if(num1 == "0" || num2 == "0") return "0";
        string result(length1 + length2, '0');
        for(int i = length1 - 1; i >= 0; i--){
            int carry = 0;
            for(int j = length2 - 1; j >= 0; j--){
                int temp = result[i+j+1] - '0' + (num1[i]-'0')*(num2[j]-'0') + carry;
                result[i+j+1] = temp%10 + '0';
                carry = temp/10;
            }
            result[i] += carry;
        }
        int start = 0;
        while(result[start] == '0'){
            start++;
        }
        return result.substr(start);
    }
};



class Solution {
public:
    string multiply(string num1, string num2) {
        int i, j;
        int m = num1.size(), n = num2.size();
        // max (m + n) digits
        vector<int> product(m + n, 0);
        string result;

        // reverse for ease of calc
        reverse(num1.begin(), num1.end());
        reverse(num2.begin(), num2.end());

        // digit i * digit j contributes to digit i + j
        for (i = 0; i < m; i++) {
            for (j = 0; j < n; j++) {
                product[i + j] += (num1[i] - '0') * (num2[j] - '0');
                product[i + j + 1] += product[i + j] / 10;
                product[i + j] %= 10;
            }
        }

        // remove leading 0; keep last 0 if all 0
        for (i = m + n - 1; i > 0 && 0 == product[i]; i--)
            ;

        for (; i >= 0; i--)
            result += to_string(product[i]);

        return result;
    }
};
