/*my version 1.0, didn't take "bb" this format into cosideration, so have to fix it halfway*/
class Solution {
public:
    string longestPalindrome(string s) {
        string result1,temp,result2;
        int count = -1;
        int offset = 0;
        int length = s.size();
        for(int i = 0; i < length; i++){
            while(i-offset >=0 && i+offset < length && s[i-offset] == s[i+offset]){
                    count += 2;
                    offset++;
            }
            temp = s.substr(i-offset+1,count);
            if(temp.size() > result1.size()) result1 = temp;
            count = -1;
            offset = 0;
            temp = "";
        }
        count = 0;
        for(int i = 0; i < length-1; i++){
           if(s[i] == s[i+1]){
               while(i-offset >= 0 && i+1+offset < length && s[i-offset] == s[i+offset+1]){
                   count += 2;
                   offset++;
               }
               temp = s.substr(i-offset+1,count);
               if(temp.size() > result2.size()) result2 = temp;
               count = 0;
               offset = 0;
               temp = "";
           }
        }
        
        return result1.size() > result2.size() ? result1 : result2;
    }
};


other's idea:
//A modification of my idea.
http://articles.leetcode.com/2011/11/longest-palindromic-substring-part-i.html

A simpler approach, O(N2) time and O(1) space:
In fact, we could solve it in O(N2) time without any extra space.

We observe that a palindrome mirrors around its center. Therefore, a palindrome can be expanded from its center,
and there are only 2N-1 such centers.
You might be asking why there are 2N-1 but not N centers? The reason is the center of a palindrome can be in between two 
letters. Such palindromes have even number of letters (such as “abba”) and its center are between the two ‘b’s.
Since expanding a palindrome around its center could take O(N) time, the overall complexity is O(N2).

string expandAroundCenter(string s, int c1, int c2) {
  int l = c1, r = c2;
  int n = s.length();
  while (l >= 0 && r <= n-1 && s[l] == s[r]) {
    l--;
    r++;
  }
  return s.substr(l+1, r-l-1);
}
 
string longestPalindromeSimple(string s) {
  int n = s.length();
  if (n == 0) return "";
  string longest = s.substr(0, 1);  // a single char itself is a palindrome
  for (int i = 0; i < n-1; i++) {
    string p1 = expandAroundCenter(s, i, i);
    if (p1.length() > longest.length())
      longest = p1;
 
    string p2 = expandAroundCenter(s, i, i+1);
    if (p2.length() > longest.length())
      longest = p2;
  }
  return longest;
}

//An O(n) solution
http://articles.leetcode.com/2011/11/longest-palindromic-substring-part-ii.html


//Manacher’s Algorithm O(n) Solution 
http://articles.leetcode.com/2011/11/longest-palindromic-substring-part-ii.html
class Solution {
public:
    string longestPalindrome(string s) {
        string T;// Transform S to T
        for(int i=0;i<s.size();i++)
            T+="#"+s.substr(i,1);
        T.push_back('#');

        vector<int> P(T.size(),0); // Array to record longest palindrome
        int center=0,boundary=0,maxLen=0,resCenter=0;
        for(int i=1;i<T.size()-1;i++) {
            int iMirror=2*center-i; // calc mirror i = center-(i-center)
            P[i]=(boundary>i)?min(boundary-i,P[iMirror]):0; // shortcut
            while(i-1-P[i]>=0&&i+1+P[i]<=T.size()-1&&T[i+1+P[i]] == T[i-1-P[i]]) // Attempt to expand palindrome centered at i
                P[i]++;
            if(i+P[i]>boundary) { // update center and boundary
                center = i;
                boundary = i+P[i];
            }
            if(P[i]>maxLen) { // update result
                maxLen = P[i];
                resCenter = i;
            }    
        }
        return s.substr((resCenter - maxLen)/2, maxLen);
    }
};
