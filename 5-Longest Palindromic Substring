/*my version 1.0, didn't take "bb" this format into cosideration, so have to fix it halfway*/
class Solution {
public:
    string longestPalindrome(string s) {
        string result1,temp,result2;
        int count = -1;
        int offset = 0;
        int length = s.size();
        for(int i = 0; i < length; i++){
            while(i-offset >=0 && i+offset < length && s[i-offset] == s[i+offset]){
                    count += 2;
                    offset++;
            }
            temp = s.substr(i-offset+1,count);
            if(temp.size() > result1.size()) result1 = temp;
            count = -1;
            offset = 0;
            temp = "";
        }
        count = 0;
        for(int i = 0; i < length-1; i++){
           if(s[i] == s[i+1]){
               while(i-offset >= 0 && i+1+offset < length && s[i-offset] == s[i+offset+1]){
                   count += 2;
                   offset++;
               }
               temp = s.substr(i-offset+1,count);
               if(temp.size() > result2.size()) result2 = temp;
               count = 0;
               offset = 0;
               temp = "";
           }
        }
        
        return result1.size() > result2.size() ? result1 : result2;
    }
};


other's idea:

http://articles.leetcode.com/2011/11/longest-palindromic-substring-part-i.html
http://articles.leetcode.com/2011/11/longest-palindromic-substring-part-ii.html
