//MyVersion 1.5, with the help from discuss


class Solution {
public:
    int compareVersion(string version1, string version2) {
        //string c1;
        //string c2;
        int v1 = 0, 
        v2 = 0;
        int comp1 = 0,
        comp2 = 0;
        int l1 = version1.length();
        int l2 = version2.length();
        while(v1 < l1 || v2 < l2){
            while(version1[v1] != '.' && v1 < l1){
                //c1 = c1 + version1[v1];
                comp1 = 10*comp1 + version1[v1] - '0';
                v1++;
            }
            //if(c1 == "") c1 = "-1";
            //comp1 = stoi(c1);
            //c1 = "";
            v1++;
            
            while(version2[v2] != '.' && v2 < l2){
                //c2 = c2 + version2[v2];
                comp2 = 10*comp2 + version2[v2] - '0';
                v2++;
            }
            //if(c1 == "") c1 = "-1";
            //comp2 = stoi(c2);
            //c2 = "";
            v2++;
        
            if(comp1 > comp2) return 1;
            else if(comp1 < comp2) return -1;
            
            comp1 = comp2 = 0;
        }
        return 0;
    }
};

//Why I didn't solve the problem, I think is because I didn't see this problem from the big picture at first, wasn't able to 
consider all the possible inputs.



//other's idea

Java, >400ms:

public class Solution {
    public int compareVersion(String version1, String version2) {
        String[] v1 = version1.split("\\.");
        String[] v2 = version2.split("\\.");
        for (int i = 0; i < Math.max(v1.length, v2.length); i++) {
            int gap = (i < v1.length ? Integer.parseInt(v1[i]) : 0) - (i < v2.length ? Integer.parseInt(v2[i]) : 0);
            if (gap != 0) {
                return gap > 0 ? 1 : -1;
            }
        }
        return 0;
    }
}



