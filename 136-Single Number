//my version 1.0, barely accecptable

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        unordered_map <int,vector<int>> hashmap;
        for(int i = 0; i < nums.size(); i++){
            hashmap[nums[i]].push_back(i);
        }
        for(auto it = hashmap.begin(); it != hashmap.end(); it++){
            if(it->second.size() == 1){
                return it->first;
            }
        }
        return 0;
    }
};

//my version 2.0, no extra space.
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        for(int i = 0; i < nums.size()-1;){
            if(nums[i]==nums[i+1]) i+=2;
            else return nums[i];
        }
        return nums[nums.size()-1];
    }
};


//other's idea:
//known that A XOR A = 0 and the XOR operator is commutative, the solution will be very straightforward. `
//Logic: XOR will return 1 only on two different bits. So if two numbers are the same,
//XOR will return 0. Finally only one number left. A ^ A = 0 and A ^ B ^ A = B.
int singleNumber(int A[], int n) {
    int result = 0;
    for (int i = 0; i<n; i++)
    {
        result ^=A[i];
    }
    return result;
}
