//other's idea
/*I see the majority of those posts use hashset to record values. Actually, we can simply adapt the Floyd Cycle detection 
algorithm. I believe that many people have seen this in the Linked List Cycle detection problem. The following is my code:*/

int digitSquareSum(int n) {
    int sum = 0, tmp;
    while (n) {
        tmp = n % 10;
        sum += tmp * tmp;
        n /= 10;
    }
    return sum;
}

bool isHappy(int n) {
    int slow, fast;
    slow = fast = n;
    do {
        slow = digitSquareSum(slow);
        fast = digitSquareSum(fast);
        fast = digitSquareSum(fast);
    } while(slow != fast);
    if (slow == 1) return 1;
    else return 0;
}


/*From Wiki, in case you have not seen it: If n is not happy, then its sequence does not go to 1. Instead, it ends in the cycle:

4, 16, 37, 58, 89, 145, 42, 20, 4, ... To see this fact, first note that if n has m digits, then the sum of the squares of its digits is at most 9^2 m, or 81m.

For m=4 and above,

n\geq10^{m-1}>81m so any number over 1000 gets smaller under this process and in particular becomes a number with strictly fewer digits. Once we are under
1000, the number for which the sum of squares of digits is largest is 999, and the result is 3 times 81, that is, 243.

In the range 100 to 243, the number 199 produces the largest next value, of 163. In the range 100 to 163, the number 159 produces the largest next value, of 107. 
In the range 100 to 107, the number 107
produces the largest next value, of 50. Considering more precisely the intervals [244,999], [164,243], [108,163] and [100,107],
we see that every number above 99 gets strictly smaller under this process. Thus, no matter what number we start with, we eventually 
drop below 100. An exhaustive search then shows that every number in the interval [1,99] either is happy or goes to the above cycle.

The above work produces the interesting result that no positive integer other than 1 is the sum of the squares of its own digits, since any such
number would be a fixed point of the described process.

There are infinitely many happy numbers and infinitely many unhappy numbers. Consider the following proof:

1 is a happy number, and for every n, 10n is happy since its sum is 1 and for every n, 2 Ã— 10n is unhappy since its sum is 4 and 4 is an unhappy number.*/

//other's code


//my rewritten
class Solution {
public:
    bool isHappy(int n) {
        int temp = 0;
        while(1){
            if(n == 4) return false;
            if(n == 1) return true;
            while(n){
                temp += (n%10) * (n%10);
                n = n/10;
            }
            n = temp;
            temp = 0;
        }
        return 1;
    }
};
